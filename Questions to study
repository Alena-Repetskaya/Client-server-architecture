HW
Client_Server
1) Прочиать про клиент-серверную архитектуру
В настоящий момент все еще не пришли к унифицироанному понятию про уровни клиент-серверной архитектуры.
Коротко помечу в свой конспект как я понимаю уровни со своими примерами.
По сути сейчас почти весь интернет представляет собой такую структуру.
Клиент - потребитель услуги. Отправляет request
Сервер - процесс предоставления услуг. Отправляет response
Клиент-серверная архитектура построена на протоколе передачи данных HTTP.
При этом клиент - это конечно "клиент", но если говорить более научным языком, то программа-клиент, которая запрашивает данные.
Клиент может быть как десктопное приложение, веб приложение. 
Сервер, это не просто отдельный компьютер (машина). Сервер это программа, которая обрабатывает запрсы от клиент-программы.
Клиентов может быть большое количество, и серверов в одной архитектуре тоже может быть много. 
Одноуровневая архитектура
Самый простой пример это сеть в Евроводосистемы. У нас было штук 10 клиентов, это компьютеры пользователей в нескольких кабенетах, 
а также тех, кто работал в удаленном формате. И был отдельный "обычный компьютер" сервер, на котором хранились общие документы.
При этом там стояло специфическое ПО, безопасность на более высоком уровне для защиты данных, обслуживание файлов автоматизировано.
Сервер при этом  не выполнял прикладных программ, только предоставлял доступ к данным. 
В целом это считается надежной системой, однако важно понимать для каких задач это нужно. 
Недостатки, если например нужно что-то синхронизировать на всех клиентских машинах, а их в архитектуре 100 шт.

Двухуровневая архитектура
Для меня это явный пример работы в компаниях по дополнительному обучению стоматологов и Интеллектуальный энергомониторинг.\
Так, обе эти компании использовали одинаковую CRM.
Каждая CRM настраивалась отдельно под нужды каждой компании, и сама по себе очень гибкая. Однако, если случались сбои в работе ПО,
то сбоила программа одинаково в обеих организациях. 
При этом, важно различать понятия 
thin klient fat server 
fat klient thin server
О чем это вообще?
Когда начались блокировки в связи с политической обстановкой, многие фирмы (конкретно знаю салон красоты в Минске)
потеряли доступ ко всем своим базам данных. Это большая проблема, т.к. они в один клик потеряли всю свою клиенскую базу.
В их случае был fat server. Если бы каким-то образом, данные собирались у них, а они только пользовались бы ПО (CRM) общей, 
то они бы по нажатию кнопочки  потеряли бы доступ к CRM но базы данных (в каком виде? Насколько читабельный вид?) были би им доступны.

Примеры толстых и тонких клиентов.
Все что, приложением отдельным устанавливается - скорее всего толстый клиент, а все, что в веб браузере - тонкий клиент
Преимущества этой системы, легко настраивать приложения, легко модифицировать, т.к. на сервере хранится сама программа.
Легко можно добавить новые клиент-машины в систему.

Однако сервера должно хватать на производительность на всех клиентов
Безопасность данных (как показано на примере выше). 
Все клиенты зависят от базы данных одного производителя.


Трехуровневая архитектура.
Клиенты с уставновленными приложениями
Сервер приложений
Через промежуточное программное обеспечение middlewere обращается к --> (за счет этого повышается производительность, гибкость работы)
БД, Сервер БД, файловыый сервер
Преимущества: целостность данных, защищенность базы данных от несанкционированного проникновения,
предоставляются права доступа к данным - ограничением в правах
недостатки: более сложная структура коммуникации между клиентом и сервером

Многоуровневая архитектура.
Почти то же самое, что и трехуровневая, но серверов приложений несколько.
Преимущества: гибкость
Недостатки: чем больше компонентов, тем сложнее наладить их работу

Преимущества архитектуры клиент-сервис: 
масштабируемость, количество клиентов и количество серверов
производительность, увеличивается скорость работы ресурсов общего пользования
безопасность, т.к. все данные на сервере, проще администрировать сервер, а не всех клиентов
независимость от платформы. Подробнее: клиент может быть на платформе андроид, айос, веб. А сервер на линукс.
нет дублирования кода, код хранится только на сервере.

Недостатки архитектуры клиент-сервис:
наличие единой точки отказа в небольших сетях с одним сервером. Отказал сервер, или сервер перегужен,
клиенты могут остаться без обслуживания. 

Также важно отметить, что сейчас появилось понятие Serverless Architecture - что подразумевает типа 
отсутствие сервера, но на самом деле сервер все также есть, просто он облачный. 
Клиент получает сервисы в виде абстрактной "функции как услуги" FaaS Funktion as a Service.

Если сервер многонагруженный, то несколько серверов + балансировщик, который помогает опеределять на какой сервер будет отправлен запрос
Может быть несколько баз данных по такому же принципу. Это называется горячий резерв.

Есть вариант, когда просто дублирующий сервер (БД) есть, но он не находится постоянно в работе, а включается, 
только если основной упал. Это называется холодный резерв. 
Кластер баз данных - копирование.

Так предотвращаем выход из строя. 

Сервер намного дороже, чем обычный компьютер.
Что делает тестировщик? В первую очередь тестирует "Клиента". 
Если есть доступ к серверу или базе данных, то там тоже можно смотреть. 

Тестирование безопасности/защищенности, это значит вклиниться в путь обмена данными, типа именно там тонкое звено. 
Именно там взломщики делают свои атаки.
Самый простой пример клиента это браузер. Мы в нем вводим какие-то HTTP запросы, а он отправляет дальше на сервера. 

2) Что ткое HTTP и HTTPS
Протокол - набор правил передачи информации. 
HyperText Transfer Protocol, «протокол передачи гипертекста».
Протокол предполагает использование клиент-серверной архитектуры.
Клиентское приложение формирует запрос и отрправляет его на сервер, серверное ПО обрабатывает запрос и 
формирует ответ. После чего передает его обратно клиенту. 
Благодаря протоколу HTTP обеспечивается работа всемирной паутины. 
Также HHTP может использоваться как "транспорт" для передачи информации для других протоколов пригладного
уровня (SOAP, XML-RPC)
API многих программных продуктов также использует HTTP для передачи данных (XML, JSON).
Передача данных по протоколу HyperText Transfer Protocol осущесвляется через TCP/IP-соединения.
Серверное ПО при этом обычно использует TCP-порт 80, хотя может использовать любой другой.

Есть расширение, которое реализует упаковку передаваемых данных в криптографический протокол SSL или TLS.
и HTTP становится HTTPS (HyperText Transfer Protocol Secure). Для таких соединений уже используется
TCP-порт 443. Благодаря HTTPS можно защитить данные от перехвата, и можно обеспечить защиту от атак
вида man-in-the-middle. 

Задачи такой не было, решила разобраться. Версии HTTP
Основной HTTP протокол, который сейчас используют имеет версию 1.1, однако также есть протокол
HTTP/2 который сделан на основе другого протокола SPDY (читается спиди). SPDY разрабатывался когда-то
в Google. на 2021 год 50% из самых популярных 10 млн сайтов поддерживаеют HTTP/2
Основные отличия версия:
в HTTP/1.1 все запросы и ответы в текстовом формате,
HTTP/2 использует двоичный уровень кадрирования для инкапсуляции всех сообщений в двоичном формате,
при это сохраняя семантику HTTP (методы, заголовки).
1.1 запрашивает страницу HTML. Если на ней содержатся ссылку на 
Уже появился HTTP/3. 20% из 10 млн самых популярных сайтов поддерживают его. Поддерживает chrome, safari, firefox,

3) HTTP методы
4) HTTP статус коды сервера
GET
POST
5) Что такое ядро браузера 
6) Какие браузеры какиие ядра используют
7) Что такое API
8) Что такое ендпоинты
9) URL (URI, URL, URN)
10) Идемпотентные HTTP методы
11) Безопасные HTTP методы
12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов
